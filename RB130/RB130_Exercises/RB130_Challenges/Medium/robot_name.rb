# Write a program that manages robot factory settings.

# When robots come off the factory floor, they have no name. The first
# time you boot them up, a random name is generated, such as RX837 or BC811.

# Every once in a while, we need to reset a robot to its factory settings,
# which means that their name gets wiped. The next time you ask, it will
# respond with a new random name.

# The names must be random; they should not follow a predictable sequence.
# Random names means there is a risk of collisions. Your solution should
# not allow the use of the same name twice.

# ---- P
# Problem: Create a object of Robot class and be able to assign it a name that is random
#          and not repeated by other Robots

# Rules:
# - Instantiated Robots should not have any name
# - Name should be generated by invoking instane method #name
# - Should be able to wipe their name via #reset instance method
# - "Next time you ask, it will respond with a new name"
#   - Does this mean the #reset method wipes name AND assigns new name?
#   - Or wipes name and must invoke #name again to assign new name?
# - Names should be randomly generated
#   - Consist of 2 letters A-Z and 3 digits 0-9

# ---- E

# ---- D
# - Use Array to hold all generated names thus far
#   - Maybe class variable?

# ---- A
# - CREATE @@all_names to empty array
# - CREATE constructor method
#   - Initialize object
#   - Set @name to nil
# - CREATE #name instance method
#   - Assign value to @name
#   - loop until condition is met
#     - ITERATE 5 times
#     - if value is 0-1, pick a random ALPHABETICAL number
#     - if value is 2-4, pick a random DIGIT
#   - break out of loop if @name value is not included in @@all_names
# - CREATE #reset instance method
#   - assign @name to nil

# Robot class
class Robot
  ALPHA = ('A'..'Z').to_a

  attr_writer :name

  @@all_names = []

  def initialize
    @name = nil
  end

  def name
    if @name.nil?
      new_name = ''
      loop do
        2.times { (new_name << ALPHA.sample) }
        3.times { (new_name << rand(0..9).to_s) }
        break unless @@all_names.include?(new_name)

        new_name = ''
      end
      @@all_names << new_name
      self.name = new_name
    else
      @name
    end
  end

  def reset
    @@all_names.delete(@name)
    self.name = nil
  end
end
